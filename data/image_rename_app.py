from flask import Flask, render_template, request, jsonify, send_from_directoryimport osfrom PIL import Imageapp = Flask(__name__)# Configure the folder containing imagesIMAGE_FOLDER = "images"  # Change this to your actual image folderFORM_TYPES_FILE = "form_types.txt"  # External file for form type optionsDEFAULT_FORM_TYPE = "BLANK"  # Default form type# Load form types from an external fileif os.path.exists(FORM_TYPES_FILE):    with open(FORM_TYPES_FILE, "r") as f:        FORM_TYPES = [line.strip() for line in f.readlines() if line.strip()]else:    FORM_TYPES = [DEFAULT_FORM_TYPE]  # Fallback to just 'blank' if file is missing# Get list of images in alphanumeric orderimage_files = sorted([f for f in os.listdir(IMAGE_FOLDER) if f.lower().endswith(('png', 'jpg', 'jpeg'))])current_index = 0@app.route('/')def index():    return render_template("image_rename_template.html", form_types=FORM_TYPES, total=len(image_files))@app.route('/get_image')def get_image():    global current_index    if 0 <= current_index < len(image_files):        return jsonify({            "image": image_files[current_index],             "filename": image_files[current_index],            "remaining": len(image_files) - current_index - 1,            "default_form_type": DEFAULT_FORM_TYPE        })    else:        return jsonify({"image": None})@app.route('/images/<filename>')def serve_image(filename):    return send_from_directory(IMAGE_FOLDER, filename)@app.route('/rename_image', methods=['POST'])def rename_image():    global current_index, image_files    data = request.json    selected_type = data.get("form_type", DEFAULT_FORM_TYPE)    rotation_angle = data.get("rotation", 0)  # Default to no rotation    current_image = image_files[current_index]        if selected_type and current_image:        old_path = os.path.join(IMAGE_FOLDER, current_image)        new_filename = f"{selected_type}_{current_image}"        new_path = os.path.join(IMAGE_FOLDER, new_filename)                # Open image, apply rotation if needed, and save it        with Image.open(old_path) as img:            img = img.rotate(-rotation_angle, expand=True)            img.save(new_path)                os.remove(old_path)  # Remove the old image                # Update list to reflect changes and maintain order        image_files[current_index] = new_filename          image_files = sorted(os.listdir(IMAGE_FOLDER))  # Refresh list after renaming                return jsonify({"success": True, "new_image": new_filename})    return jsonify({"success": False})@app.route('/save_rotation', methods=['POST'])def save_rotation():    global current_index    data = request.json    rotation_angle = data.get("rotation", 0)    current_image = image_files[current_index]        if current_image:        old_path = os.path.join(IMAGE_FOLDER, current_image)                # Open image, apply rotation, and save it        with Image.open(old_path) as img:            img = img.rotate(-rotation_angle, expand=True)            img.save(old_path)  # Save over the original file                return jsonify({"success": True})    return jsonify({"success": False})@app.route('/next_image', methods=['POST'])def next_image():    global current_index    if current_index < len(image_files) - 1:        current_index += 1        return jsonify({"success": True})    return jsonify({"success": False})@app.route('/previous_image', methods=['POST'])def previous_image():    global current_index    if current_index > 0:        current_index -= 1        return jsonify({"success": True})    return jsonify({"success": False})if __name__ == '__main__':    app.run(debug=True)