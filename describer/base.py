import importlib
import inspect

class ImageDescriber:
    """Image description interface.
    To ask questions about an image using a variety of models.

    Usage:

    # Instantiate a custom description class based on Moondream model
    describer = Describer.new('moondream')
    # Get the name of the model
    describer.get_name()
    # Ask a question about the image
    answer = describer.answer_question("myimage.jpg", "How many people in this image?")
    """

    @classmethod
    def new(cls, model_name):
        """Returns a new instance of a describer class
        which module name matches 'model_name'.
        See other modules in this package."""
        ret = None

        module = importlib.import_module('describer.' + model_name)
        for member_name in dir(module):
            member = getattr(module, member_name)
            if inspect.isclass(member) and issubclass(member, cls):
                ret = member()
        
        return ret

    def get_name(self) -> str:
        """Returns the name of the underlying model .
        In the hugging face format: org/model:version.
        E.g. vikhyatk/moondream2:2024-07-23.
        This can be looked up on HF website.
        """
        pass

    def answer_question(self, image_path: str, question: str) -> str:
        """Returns a string generated by a multimodal model
        to answer a 'question' about an image in image_path.
        """
        pass

    def answer_questions(self, image_path: str, questions: dict) -> dict:
        """Returns answers to all questions 
        about an image in image_path.
        """
        ret = {}
        for question_key, question in questions.items():
            self.log(f'question - before - {question_key}')
            ret[question_key] = self.answer_question(image_path, question)
            self.log(f'question - after - {question_key}')
        return ret

    def set_optimisation(self, optimise=False):
        self.optimise = optimise

    def set_timer(self, timer=None):
        self.timer = timer
    
    def log(self, message):
        timer = getattr(self, 'timer')
        if timer:
            timer.step(message)



        


